rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null && request.auth.token.email_verified;
    }
    function hasAccessLevel(level) {
      return request.auth.token.access_level>=level;
    }
    function verifyFields(required, optional) {
      let allAllowedFields = required.concat(optional);
      return (request.resource.data.diff(resource.data).affectedKeys().hasAll(required) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(allAllowedFields));
    }

    

    
    match /users/{userId} {

      // USER

      function isParent() {
        return resource.data.parent_ids.hasAny([request.auth.uid]);
      }
      function isOwner() {
        return request.auth.uid == resource.data.auth_id;
      }
      function isOwnerOrAdmin() {
        return isOwner() || hasAccessLevel(2000);
      }
      function canUpdateUserData() {
        let requiredFields = ['last_update'];
        //let clientAllowedFields = ['form_of_adress', 'first_name', 'last_name', 'street', 'house_number', 'postal_code', 'city', 'country', 'country_ISO2', 'portrait_url', 'phone_numbers', 'phone_number', 'date_of_birth', 'preferred_language', 'availability', 'invoice_delivery'];
        //let adminAllowedFields = clientAllowedFields.concat(['roles', 'access_level', 'status', 'linked', 'discount', 'special_pass', 'special_pass_reduction', 'special_pass_valid_until', 'bio', 'email', 'parents', 'children', 'new_messages', 'booked_courses', 'coached_courses']);
        let clientAllowedFields = [
          'bio',
          'form_of_adress',
          'first_name',
          'last_name',
          'street',
          'house_number',
          'postal_code',
          'city',
          'district',
          'country',
          'country_ISO2',
          'photo_url',
          'phone_number',
          'date_of_birth',
          'last_update',
          'preferred_language',
          'invoice_delivery',
        ];
        let adminAllowedFields = clientAllowedFields.concat([
          'auth_id',
          'roles',
          'is_admin',
          'is_coach',
          'is_client',
          'status',
          'sallary',
          'email',
          'parents',
          'parent_ids',
          'children',
          'child_ids',
          'booked_courses',
          'booked_course_ids',
          'coached_courses',
          'coached_course_ids',
        ]);
        return ((isOwner() || isParent()) && verifyFields(
            requiredFields,
            clientAllowedFields
          ))
          || (hasAccessLevel(2000) && verifyFields(
            requiredFields,
            adminAllowedFields
          ))
      }

      
      allow read: if (isAuthenticated() && (isOwnerOrAdmin() || isParent()));
      allow create: if false;
      allow update: if isAuthenticated() && canUpdateUserData();
      allow delete: if false;

    }



    match /courses/{courseId} {

      // COURSES

      allow read: if true;
      allow create: if false;
      allow update: if (isAuthenticated() && hasAccessLevel(1000));
      allow delete: if false;
    }

    match /pools/{poolId} {

      // POOLS

      allow read: if true;
      allow create: if false;
      allow update: if isAuthenticated() && hasAccessLevel(2000);
      allow delete: if false;
    }

    match /invoices/{invoiceId} {

      // INVOICES

      function isInvolvedInInvoice() {
        return (request.auth.uid == resource.data.sender_id || request.auth.uid == resource.data.reciever_id);
      }

      allow read: if isAuthenticated() && (hasAccessLevel(2000) || isInvolvedInInvoice());
      allow write: if isAuthenticated() && hasAccessLevel(2000);
    }

    match /SYSTEM/{documentId} {

      // SYSTEM

      allow read: if isAuthenticated() && hasAccessLevel(2000);
      allow write: if isAuthenticated() && hasAccessLevel(2000);
    }

    match /logs/{logId} {

      // LOGS

      allow read: if isAuthenticated() && hasAccessLevel(2000);
      allow write: if isAuthenticated() && hasAccessLevel(2000);
    }


  }
}